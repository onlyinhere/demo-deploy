name: Deploy for ci/cd

# 트리거(이벤트 발생시킬때 씀)
on:
  # 원인 : 푸시
  push:
    # 대상 브런치
    brunches:
      # 2. 대상 브런치는 db(본인 브런치명)
      - madb

# 해야될 일 => jobs
jobs:
  # 잡 전체에 대한 이름 (커스텀)
  cicd-deploy:
    # ubuntu linux 준비 -> 해당 작업이 진행되는 베이스 OS 지원
    runs-on: ubuntu-latest
    # 개별 작업 단계 지정
    steps:
      # https://github.com/actions/checkout 사용
      # 해당 작업이 수행되면 본 레포지토리(저장소) 체크아웃되어 os단에 저장
      # 향후 워크플로우에서 엑세스 처리 가능하게 구성된다
      - # name: 작업명 기술, uses: 실제할일 기술
      - name: Github Repository 내 파일들 checkout(불러오기) 수행
        uses: actions/checkout@v4

      # JDK 17 버전 설치
      # https://github.com/actions/setup-java
      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'

      # application.yml 동적 생성
      # 소스 코드내에 위치 (덮어쓰기?, 신규작성?)
      # RDS 세팅된 이후 진행
      # 현재는 skip
      - name: application.properties 동적 생성
        run: |
         echo "${{ secrets.APPLICATION_PRO }}" > ./src/main/resources/application.properties
         ls ./src/main/resources/
         

      # build 준비
      # chmod +x ./gradlew : 퍼미션 오류 발생시 처리
      # ./gradlew clean build
      - name: 단위 테스트 및 빌드
        # 명령어가 여러개면 | 추가
        # 1. 빌드용 쉘스크립트(gradlew)를 퍼미션 조정
        # 2. 빌드
        # 3. 현재 위치 확인
        # 4. 현재 위치 목록
        # 5. 빌드된 산출물의 목록 확인
        run: |
          chmod +x ./gradlew
          ./gradlew clean build
          pwd
          ls
          ls ./build/libs

      # 이름이 너무 길므로 적당하게 수정 -> 리눅스 명령어
      # # 파일 위치를 변경하면서 이름도 변경 -> mv
      - name: 관리상 빌드된 결과물의 이름을 변경 처리
        run: |
          mv ./build/libs/*SNAPSHOT.jar ./run.jar
          ls


      # EC2 로 업로드
      # https://github.com/appleboy/scp-action
      #
      #
      #
      #
      - name: EC2에 jar 파일 업로드
        uses: appleboy/scp-action@v0.1.7
        # 위의 액션을 위한 파라미터
        # SSH의 포트를 보안상 이유로 22 -> 다른 번호로 변경 했다면
        # port 설징 필요
        # 파일이 여러개면 "파일, 파일,,,"
        # 원격 서버에 폴더도 자동 생성되는지 검토
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: run.jar
          target: /home/ubuntu/server/demo

      # EC2 접속, 서버가동!!
      # https://github.com/appleboy/scp-action
      - name: SSH로 ec2에 접속후 서버가동
        uses: appleboy/ssh-action@v1.2.0
        # script_stop : true -> 오류나면 중단
        # 처리할 작업
        # 처리할 반복적 작업
        #  기존 jar 파일 삭제 처리 (업로드 위치, 구동 위치 구분)
        # 구동 위치 : /home/ubuntu/server/web <- 설정(가정)
        # rm -rf 대상 => 대상의 폴더 및 하위 파일까지 모두다 삭제
        # 2. 새롭게 폴더 생성 /home/ubuntu/server/web
        # mkdir /home/ubuntu/server/web
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.KEY }}
          script_stop: true
          script: |
            rm -rf /home/ubuntu/server/web
            mkdir /home/ubuntu/server/web
            mv /home/ubuntu/server/demo/run.jar /home/ubuntu/server/web/run.jar